#
# nanoCPU assembler:
#


function(to_binary out num)
    # Encode num to binary string
    set(r ${num})
    set(acc)
    foreach(d 128 64 32 16 8 4 2 1)
        if(d GREATER r)
            set(acc "${acc}0")
        else()
            math(EXPR r "${r}-${d}")
            set(acc "${acc}1")
        endif()
    endforeach()

    if(NOT r EQUAL 0)
        message(FATAL_ERROR "Unexpected: ${num} => residue ${r} acc ${acc}")
    endif()

    set(${out} ${acc} PARENT_SCOPE)
endfunction()

function(to_binary12 out num)
    # Encode num to binary string(12bits version)
    set(r ${num})
    set(acc)
    foreach(d 2048 1024 512 256 128 64 32 16 8 4 2 1)
        if(d GREATER r)
            set(acc "${acc}0")
        else()
            math(EXPR r "${r}-${d}")
            set(acc "${acc}1")
        endif()
    endforeach()

    if(NOT r EQUAL 0)
        message(FATAL_ERROR "Unexpected: ${num} => residue ${r} acc ${acc}")
    endif()

    set(${out} ${acc} PARENT_SCOPE)
endfunction()

macro(global_set var in)
    message(STATUS "Set: ${var} = ${in}")
    set_property(GLOBAL 
        PROPERTY global_${var} ${in})
endmacro()

macro(global_ref out var)
    get_property(${out} GLOBAL
        PROPERTY global_${var})
endmacro()

function(token_type out tok) 
    # => LABEL / ORG / DEF / FILLER / INST0 / INST1 / IMM / OTHERS
    if(${tok} STREQUAL "NOR" OR 
            ${tok} STREQUAL "ADD" OR 
            ${tok} STREQUAL "STA" OR 
            ${tok} STREQUAL "JCC")
        set(r INST1)
    elseif(${tok} STREQUAL "SWD" OR 
            ${tok} STREQUAL "SWS" OR
            ${tok} STREQUAL "LDS" OR
            ${tok} STREQUAL "LPS")
        set(r INST0)
    elseif(${tok} STREQUAL "___")
        set(r FILLER)
    elseif(${tok} STREQUAL "____")
        set(r FILLER)
    elseif(${tok} STREQUAL "_ORG")
        set(r ORG)
    elseif(${tok} STREQUAL "_DEF")
        set(r DEF)
    elseif(${tok} STREQUAL "_IMM")
        set(r IMM)
    elseif(${tok} MATCHES "[^:]+:")
        set(r LABEL)
    else()
        set(r OTHERS)
    endif()
    set(${out} ${r} PARENT_SCOPE)
endfunction()

function(code_inst out inst addr)
    if(${inst} STREQUAL "NOR")
        math(EXPR r "${addr}")
    elseif(${inst} STREQUAL "ADD")
        math(EXPR r "${addr}+64")
    elseif(${inst} STREQUAL "STA")
        math(EXPR r "${addr}+128")
    elseif(${inst} STREQUAL "JCC")
        math(EXPR r "${addr}+192")
    else()
        message(FATAL_ERROR "Unknown opcode: ${inst} ${addr}")
    endif()
    set(${out} ${r} PARENT_SCOPE)
endfunction()

function(code_special out inst)
    if(${inst} STREQUAL "SWD")
        set(r 252)
    elseif(${inst} STREQUAL "SWS")
        set(r 253)
    elseif(${inst} STREQUAL "LDS")
        set(r 254)
    elseif(${inst} STREQUAL "LPS")
        set(r 255)
    else()
        message(FATAL_ERROR "Unknown opcode: ${inst}")
    endif()
    set(${out} ${r} PARENT_SCOPE)
endfunction()

macro(inc var)
    set(__prev ${${var}})
    math(EXPR ${var} "${__prev}+1")
endmacro()

function(asm_pass1 id in_lis)
    set(cur 0)
    set(state NUL)
    set(varnames)
    set(varname)
    foreach(tok ${${in_lis}})
        #message(STATUS "Token: ${tok}")
        if(${state} STREQUAL "NUL")
            token_type(typ ${tok})
            if(${typ} STREQUAL "FILLER")
                # Do nothing
            elseif(${typ} STREQUAL "INST1" OR
                    ${typ} STREQUAL "IMM")
                set(state INST1)
                inc(cur)
            elseif(${typ} STREQUAL "INST0")
                inc(cur)
            elseif(${typ} STREQUAL "ORG")
                set(state ORG)
            elseif(${typ} STREQUAL "DEF")
                set(state DEF0)
            elseif(${typ} STREQUAL "LABEL")
                if(${tok} MATCHES "([^:]+):")
                    set(varname ${CMAKE_MATCH_1})
                    #message(STATUS "Label: ${varname}")
                    list(APPEND varnames ${varname})
                    set(var_${varname} ${cur})
                endif()
            else()
                message(FATAL_ERROR "Huh? ${state} ${typ}")
            endif()
        elseif(${state} STREQUAL "INST1")
            token_type(typ ${tok})
            if(${tok} STREQUAL "LABEL")
                message(FATAL_ERROR "Invalid label location")
            endif()
            set(state NUL)
        elseif(${state} STREQUAL "ORG")
            set(cur ${tok})
            set(state NUL)
        elseif(${state} STREQUAL "DEF0")
            set(varname ${tok})
            set(state DEF1)
        elseif(${state} STREQUAL "DEF1")
            set(var_${varname} ${tok})
            list(APPEND varnames ${varname})
            set(state NUL)
        else()
            message(FATAL_ERROR "Huh? ${state}")
        endif()
    endforeach()

    foreach(v ${varnames})
        global_set(${id}_${v} ${var_${v}})
    endforeach()
endfunction()

function(lookupvar out id name)
    if(${name} MATCHES "^[0-9].*")
        math(EXPR r "${name}")
    else()
        global_ref(gref globals_${name})
        global_ref(ref ${id}_${name})
        if("x${gref}" STREQUAL x)
            if("x${ref}" STREQUAL x)
                message(FATAL_ERROR "Undefined variable: ${name} (id: ${id})")
            endif()
            #message(STATUS "Lookup(Local): ${name} => ${ref}")
            set(r ${ref})
        else()
            #message(STATUS "Lookup(Global): ${name} => ${gref}")
            set(r ${gref})
        endif()
    endif()
    set(${out} ${r} PARENT_SCOPE)
endfunction()

function(asm_pass2 out id in_lis)
    set(addrs)
    set(inst)
    set(code)
    set(cur 0)
    set(state NUL)
    while(NOT cur EQUAL 64)
        list(APPEND addrs ${cur})
        math(EXPR cur "${cur}+1")
    endwhile()
    foreach(a ${addrs})
        set(mem_${a} 0)
    endforeach()

    set(cur 0)
    foreach(tok ${${in_lis}})
        if(${state} STREQUAL "NUL")
            token_type(typ ${tok})
            if(${typ} STREQUAL "FILLER")
                set(mem_${cur} 0)
            elseif(${typ} STREQUAL "INST1" OR
                    ${typ} STREQUAL "IMM")
                set(inst ${tok})
                set(state INST1)
            elseif(${typ} STREQUAL "INST0")
                code_special(i ${tok})
                set(mem_${cur} ${i})
                inc(cur)
            elseif(${typ} STREQUAL "ORG")
                set(state ORG)
            elseif(${typ} STREQUAL "DEF")
                set(state DEF0)
            elseif(${typ} STREQUAL "LABEL")
                # Do nothing
            else()
                message(FATAL_ERROR "Huh? ${state} ${typ}")
            endif()
        elseif(${state} STREQUAL "INST1")
            lookupvar(v ${id} ${tok})
            #message(STATUS "Lookup: ${tok} => ${v}")
            if(${inst} STREQUAL "_IMM")
                set(mem_${cur} ${v})
            else()
                code_inst(i ${inst} ${v})
                set(mem_${cur} ${i})
            endif()
            inc(cur)
            set(state NUL)
        elseif(${state} STREQUAL "ORG")
            set(cur ${tok})
            set(state NUL)
        elseif(${state} STREQUAL "DEF0")
            set(state DEF1)
        elseif(${state} STREQUAL "DEF1")
            set(state NUL)
        else()
            message(FATAL_ERROR "Huh? ${state}")
        endif()
    endforeach()

    foreach(a ${addrs})
        list(APPEND code ${mem_${a}})
    endforeach()
    set(${out} ${code} PARENT_SCOPE)
endfunction()

